0010* MEMBER      BPCOSF
0020* Function    Copy Member from PC to BS2000 sequential file
0030*             You may specify Modules to translate Characters
0040*
0050* Maintenance
0060* uuu dd-mm-yy  ...
0070* ----------------------------------------------------------------------
0080DEFINE DATA GLOBAL USING TUTO
0090            LOCAL
0100*
011001 FILE-ATTRIBUTES VIEW OF FILE-ATTRIBUTES
0120   02 ERROR-TEXT
0130   02 ERROR-CODE
0140   02 SYSTEM-CODE
0150   02 SECURITY
0160   02 SYSTEM-MESSAGE-CODE
0170*
018001 FILE-ALLOCATE VIEW OF FILE-ALLOCATE
0190   02 ERROR-TEXT
0200   02 ERROR-CODE
0210   02 SYSTEM-CODE
0220   02 SYSTEM-MESSAGE-CODE
0230*
024001 FILE-MAINTENANCE VIEW OF FILE-MAINTENANCE
0250   02 ERROR-TEXT
0260   02 ERROR-CODE
0270   02 SYSTEM-CODE
0280*
029001 WRITE-FILE VIEW OF WRITE-FILE
0300   02 ERROR-TEXT
0310   02 ERROR-CODE
0320   02 SYSTEM-MESSAGE-CODE
0330   02 SYSTEM-CODE
0340*
035001 #TRANS-PGM               (A8/1:5) INIT (01) <'BTLCPGM '>
0360*
037001 #DSNAME                  (A54)
038001 #PASSWORD                (A8)
039001 #VOLSER                  (A6)
040001 #REPLACE                 (A3) INIT <'NO'>
0410*
042001 I                        (P2)
043001 RECORDS-WRITTEN          (L)
044001 #IN-RECORD               (A253)
045001 #IN-LENGTH               (P3)
046001 #OUT-RECORD              (A253)
047001 #PROGRAM                 (A8)
048001 CV-PASSWORD              (C)
0490END-DEFINE
0500*
0510* ------------------------------ MAIN LOOP ----------------------------
0520*
0530PERFORM PF-KEY
0540*
0550MAIN.
0560REPEAT
0570  PERFORM SCREEN-IO
0580  DECIDE FOR EVERY CONDITION
0590    WHEN ##MSG-NR = 0
0600         PERFORM CHECK-IF-FILE-EXIST
0610    WHEN ##MSG-NR = 0
0620         PERFORM ALLOCATE-FILE
0630    WHEN ##MSG-NR = 0
0640         PERFORM UPLOAD-PC-FILE
0650    WHEN ##MSG-NR = 0
0660         PERFORM RELEASE-UNUSED-SPACE
0670    WHEN NONE
0680         IGNORE
0690  END-DECIDE
0700END-REPEAT
0710*
0720* ------------------------------ check-if-file-exist ------------------
0730*
0740DEFINE SUBROUTINE CHECK-IF-FILE-EXIST
0750FNDFILE.
0760FIND FILE-ATTRIBUTES
0770     WITH NODE   = ##NODE
0780     AND  DSNAME = #DSNAME
0790     AND  VOLSER = #VOLSER
0800*
0810  DECIDE FOR FIRST CONDITION
0820    WHEN ERROR-CODE = 5722 OR = 722
0830         ESCAPE BOTTOM (FNDFILE.)
0840    WHEN ERROR-CODE NE 0 OR SYSTEM-CODE NE 0
0850         INCLUDE BERR---C
0860         ESCAPE BOTTOM (FNDFILE.)
0870    WHEN NONE
0880         IGNORE
0890  END-DECIDE
0900*
0910  RESET INITIAL #REPLACE #PASSWORD
0920  IF SECURITY = 'NONE'
0930     MOVE (AD=DP) TO CV-PASSWORD
0940  END-IF
0950*
0960  SET CONTROL 'WFC11L59B07/10'
0970  INPUT USING MAP 'BPCOSFW&'
0980  SET CONTROL 'WMB'
0990*
1000  IF #REPLACE = 'YES'
1010     IGNORE
1020   ELSE
1030     ASSIGN ##MSG-NR = 9999
1040  END-IF
1050*
1060END-FIND
1070END-SUBROUTINE
1080*
1090* ------------------------------ allocate-file ------------------------
1100*
1110DEFINE SUBROUTINE ALLOCATE-FILE
1120ALLOCFILE.
1130PROCESS FILE-ALLOCATE
1140        USING NODE                  = ##NODE
1150          ,   DSNAME                = #DSNAME
1160          ,   DSORG                 = 'SAM'
1170          ,   REPLACE               = 'YES'
1180          ,   VOLSER                = #VOLSER
1190          ,   RECFM                 = 'V'
1200          ,   PRIMARY-ALLOCATION    = 48
1210          ,   SECONDARY-ALLOCATION  = 12
1220       GIVING ERROR-CODE
1230              ERROR-TEXT
1240              SYSTEM-CODE
1250IF ERROR-CODE (ALLOCFILE.) NE 0
1260   INCLUDE BERR---C
1270END-IF
1280END-SUBROUTINE
1290*
1300* ------------------------------ upload-pc-file -----------------------
1310*
1320DEFINE SUBROUTINE UPLOAD-PC-FILE
1330ASSIGN RECORDS-WRITTEN = FALSE
1340READ.
1350READ PC FILE 5 #IN-RECORD
1360  EXAMINE #IN-RECORD FOR 'X' GIVING LENGTH IN #IN-LENGTH
1370  FOR I = 1 TO 5
1380    IF #TRANS-PGM (I) NE ' '
1390       CALLNAT #TRANS-PGM (I) #IN-RECORD
1400                              #IN-LENGTH
1410                              #OUT-RECORD
1420       ASSIGN #IN-RECORD = #OUT-RECORD
1430    END-IF
1440  END-FOR
1450  ASSIGN RECORDS-WRITTEN = TRUE
1460*
1470WRITE.
1480  PROCESS WRITE-FILE
1490          USING NODE                  = ##NODE
1500            ,   DSNAME                = #DSNAME
1510            ,   DISP                  = 'NEW'
1520            ,   PASSWORD              = #PASSWORD
1530            ,   RECORD                = #IN-RECORD
1540            ,   RECORD-LENGTH         = #IN-LENGTH
1550         GIVING ERROR-CODE
1560                ERROR-TEXT
1570                SYSTEM-CODE
1580  IF ERROR-CODE NE 0
1590     INCLUDE BERR---C
1600     ESCAPE BOTTOM
1610  END-IF
1620END-WORK
1630*
1640IF RECORDS-WRITTEN
1650CLOSE.
1660   PROCESS WRITE-FILE
1670           USING NODE                  = ##NODE
1680             ,   DSNAME                = #DSNAME
1690             ,   FUNCTION              = 'CLOSE'
1700          GIVING ERROR-CODE
1710                 ERROR-TEXT
1720                 SYSTEM-CODE
1730   IF ERROR-CODE NE 0
1740      INCLUDE BERR---C
1750   END-IF
1760END-IF
1770END-SUBROUTINE
1780*
1790* ------------------------------ release-unused-space -----------------
1800*
1810DEFINE SUBROUTINE RELEASE-UNUSED-SPACE
1820RELSPACE.
1830PROCESS FILE-MAINTENANCE
1840        USING NODE     =  ##NODE
1850          ,   DSNAME   =  #DSNAME
1860          ,   VOLSER   =  #VOLSER
1870          ,   FUNCTION =  'COMPRESS'
1880       GIVING ERROR-CODE
1890              SYSTEM-CODE
1900              ERROR-TEXT
1910IF ERROR-CODE NE 0 OR SYSTEM-CODE NE 0
1920   INCLUDE BERR---C
1930END-IF
1940END-SUBROUTINE
1950*
1960* ------------------------------ SCREEN-IO ----------------------------
1970*
1980DEFINE SUBROUTINE SCREEN-IO
1990INPUT WITH TEXT *##MSG-NR,
2000                 ##MSG-TXT1,
2010                 ##MSG-TXT2
2020      USING MAP 'BPCOSF-&'
2030RESET ##MSG
2040END-SUBROUTINE
2050*
2060* ------------------------------ PF-KEY -------------------------------
2070*
2080INCLUDE C-PFKEY
2090*
2100* ------------------------------ on error -----------------------------
2110*
2120ON ERROR
2130  DECIDE ON FIRST *ERROR-NR
2140    VALUE 1016 ASSIGN #PROGRAM = *PROGRAM
2150               FETCH #PROGRAM
2160    NONE       IGNORE
2170  END-DECIDE
2180END-ERROR
2190END
