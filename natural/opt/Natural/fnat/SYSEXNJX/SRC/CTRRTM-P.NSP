0010* >Natural Source Header 000000
0020* :Mode S
0030* :CP
0040* <Natural Source Header
0050DEFINE DATA LOCAL
00601 CDINDEX (I4)
00701 CEVENT (A) DYNAMIC
00801 CINDEX (I4)
00901 CROWCOUNT (I4)
01001 CSIZE (I4)
01101 CTOPINDEX (I4)
01201 INFOPAGENAME (A) DYNAMIC INIT <'html/ctrlrta2treemov.html'>
01301 LINES (1:*)
0140  2 DRAGINFO (A) DYNAMIC
0150  2 DROPINFO (A) DYNAMIC
0160  2 FIRST (A) DYNAMIC
0170  2 ID (A) DYNAMIC
0180  2 LAST (A) DYNAMIC
0190  2 LEVEL (I4)
0200  2 REFLINK (A) DYNAMIC
0210  2 OPENED (I4)
0220  2 SELECTED (L)
0230  2 TEXT (A) DYNAMIC
02401 LINESINFO
0250  2 DSPINDEXFIRST (I4)
0260  2 ROWCOUNT (I4)
0270  2 SIZE (I4)
0280  2 SORTPROPS (1:*)
0290    3 ASCENDING (L)
0300    3 PROPNAME (A) DYNAMIC
0310  2 TOPINDEX (I4)
03201 XCIEVENTDATA
0330  2 XCIINDEX (I4)
0340
0350*
0360* Number of rows initially displayed.
03701 CROWS (I4) CONST <15>
0380*
0390* Department record.
04001 DEPT VIEW OF EMPLOYEES
0410  2 DEPT
0420* Employees record.
04301 EMPL VIEW OF EMPLOYEES
0440  2 PERSONNEL-ID
0450  2 NAME
0460  2 REDEFINE NAME
0470    3 NAME1 (A1)
0480    3 NAME2 (A19)
0490  2 FIRST-NAME
0500  2 REDEFINE FIRST-NAME
0510    3 FIRST-NAME1 (A1)
0520    3 FIRST-NAME2 (A19)
0530*
0540* Server side cache of top nodes.
05501 CACHE (1:*)
0560* Node text.
0570  2 TEXT (A) DYNAMIC
0580* Open state of child nodes.
0590  2 COPEN (I4)
0600* Count of child nodes.
0610  2 CCOUNT (I4)
06201 I (I4)
06301 J (I4)
06401 K (I4)
06501 IND (I4)
06601 STARTINDEX (I4)
0670*
06801 #ROWCOUNT (I4)
06901 #LINECOUNT (I4)
07001 #TOPNODES (I4)
07101 #NODES (I4)
07201 #MSG1 (A72) INIT <'This example needs the EMPLOYEES file in the demo database'>
07301 #MSG2 (A24)
07401 #MSG3 (A72)
07501 #II (I4)
0760END-DEFINE
0770*
0780* Initialize the server side cache.
0790PERFORM INITCACHE
0800* Define the portion of lines to display initially.
0810LINESINFO.TOPINDEX := 0
0820LINESINFO.ROWCOUNT := CROWS
0830* Calulate the (initial) total number of records.
0840PERFORM GETSIZE
0850* Get the requested portion of lines.
0860PERFORM GETLINES
0870* Initialize the status info.
0880PERFORM SETSTATUSINFO
0890*
0900* Display the page.
0910PROCESS PAGE USING 'CTRRTM-A'
0920*
0930* Handle the events.
0940DECIDE ON FIRST *PAGE-EVENT
0950  VALUE U'nat:page.end'
0960* Leave the program.
0970    IGNORE
0980*
0990* We need these three events to handle scrolling and toggling.
1000  VALUE U'lines.onTopindexChanged',
1010      U'lines.reactOnToggle'
1020* Synchronize the server side cache with the page display.
1030    PERFORM UPDATECACHE
1040* Get the requested portion of lines.
1050    PERFORM GETLINES
1060* Update the status info.
1070    PERFORM SETSTATUSINFO
1080* And return.
1090    PROCESS PAGE UPDATE FULL
1100*
1110* A link has been clicked
1120  VALUE U'lines.reflinkclicked'
1130    RESET #MSG3
1140    IF XCIEVENTDATA.XCIINDEX > 0
1150        MOVE XCIEVENTDATA.XCIINDEX TO #II
1160        COMPRESS 'Link for ' LINES.FIRST (#II) LINES.LAST (#II) ' has been clicked' INTO #MSG3
1170    END-IF
1180    PROCESS PAGE UPDATE FULL
1190      AND SEND EVENT 'nat:page.message'
1200      WITH PARAMETERS
1210        NAME 'type'  VALUE 'S'
1220        NAME 'short' VALUE #MSG3
1230        NAME 'long'  VALUE #MSG3
1240      END-PARAMETERS
1250
1260  NONE VALUE
1270* Update the status info.
1280    PERFORM SETSTATUSINFO
1290* And return.
1300    PROCESS PAGE UPDATE FULL
1310END-DECIDE
1320*
1330* Initialize the server side cache.
1340DEFINE SUBROUTINE INITCACHE
1350* Determine the number of top nodes.
1360RESET #TOPNODES
1370HISTOGRAM DEPT FOR DEPT
1380  ADD 1 TO #TOPNODES
1390END-HISTOGRAM
1400EXPAND ARRAY CACHE TO (1:#TOPNODES)
1410* Add the top nodes.
1420RESET #TOPNODES
1430HISTOGRAM DEPT FOR DEPT
1440  ADD 1 TO #TOPNODES
1450  CACHE.TEXT (#TOPNODES) := DEPT.DEPT
1460  CACHE.COPEN (#TOPNODES) := 0
1470  CACHE.CCOUNT (#TOPNODES) := 0
1480END-HISTOGRAM
1490END-SUBROUTINE
1500*
1510DEFINE SUBROUTINE UPDATECACHE
1520* Synchronize the cache with the page display.
1530* Keep track of nodes that got their their child nodes toggled.
1540IF *PAGE-EVENT = U'lines.reactOnToggle'
1550  I := XCIEVENTDATA.XCIINDEX
1560  IF LINES.LEVEL (I) EQ 1
1570    EXAMINE FULL CACHE.TEXT(*) FOR LINES.TEXT (I)
1580      GIVING INDEX IN J
1590    IF J NE 0
1600      CACHE.COPEN (J) := LINES.OPENED (I)
1610    END-IF
1620  END-IF
1630END-IF
1640END-SUBROUTINE
1650*
1660DEFINE SUBROUTINE GETLINES
1670* Get the requested portion of lines.
1680* Calculate the requested portion of nodes from top index and row count.
1690PERFORM GETINDEXES
1700* Get the child count for the top nodes that were not yet displayed.
1710IND := STARTINDEX
1720#ROWCOUNT := LINESINFO.ROWCOUNT
1730#LINECOUNT := #ROWCOUNT
1740FOR I := 1 TO #ROWCOUNT
1750* Add the child nodes.
1760  IF CACHE.COPEN (IND+I) NE 0 AND CACHE.CCOUNT (IND+I) EQ 0
1770    FIND NUMBER EMPL WITH DEPT = CACHE.TEXT (IND+I)
1780    CACHE.CCOUNT (IND+I) := *NUMBER
1790  END-IF
1800  ADD CACHE.CCOUNT (IND+I) TO #LINECOUNT
1810END-FOR
1820* Copy the requested portion of lines into the page buffer.
1830REDUCE ARRAY LINES TO 0
1840EXPAND ARRAY LINES TO (1:#LINECOUNT)
1850RESET J
1860FOR I := 1 TO #ROWCOUNT
1870  ADD 1 TO J
1880  LINES.TEXT (J) := CACHE.TEXT (IND+I)
1890  LINES.OPENED (J) := CACHE.COPEN (IND+I)
1900  LINES.LEVEL (J) := 1
1910  IF CACHE.CCOUNT (IND+I) NE 0
1920    FIND EMPL WITH DEPT = CACHE.TEXT (IND+I)
1930      ADD 1 TO J
1940      RESET LINES.TEXT (J)
1950      LINES.OPENED (J) := 2
1960      LINES.LEVEL (J) := 2
1970      LINES.ID (J) := EMPL.PERSONNEL-ID
1980      EXAMINE EMPL.NAME2 TRANSLATE INTO LOWER
1990      EXAMINE EMPL.FIRST-NAME2 TRANSLATE INTO LOWER
2000      LINES.LAST (J) := EMPL.NAME
2010      LINES.FIRST (J) := EMPL.FIRST-NAME
2020      COMPRESS 'REF_' EMPL.PERSONNEL-ID INTO LINES.REFLINK (J) LEAVING NO
2030    END-FIND
2040  END-IF
2050END-FOR
2060END-SUBROUTINE
2070*
2080DEFINE SUBROUTINE GETSIZE
2090* Calulate the (initial) total number of records.
2100LINESINFO.SIZE := *OCC(CACHE.TEXT)
2110END-SUBROUTINE
2120*
2130DEFINE SUBROUTINE GETINDEXES
2140* Calculate LINESINFO.DSPINDEXFIRST and STARTINDEX for GETLINES.
2150RESET STARTINDEX
2160RESET LINESINFO.DSPINDEXFIRST
2170RESET #NODES
2180FOR #TOPNODES := 1 TO *OCC(CACHE.TEXT)
2190  ADD 1 TO #NODES
2200  IF CACHE.COPEN (#TOPNODES) EQ 1
2210    ADD CACHE.CCOUNT (#TOPNODES) TO #NODES
2220  END-IF
2230  IF #NODES GE LINESINFO.TOPINDEX + 1
2240    STARTINDEX := #TOPNODES - 1
2250    IF CACHE.COPEN (#TOPNODES) EQ 1
2260      SUBTRACT CACHE.CCOUNT (#TOPNODES) FROM #NODES
2270    END-IF
2280    LINESINFO.DSPINDEXFIRST := #NODES - 1
2290    ESCAPE ROUTINE
2300  END-IF
2310END-FOR
2320END-SUBROUTINE
2330*
2340DEFINE SUBROUTINE SETSTATUSINFO
2350* Update the status info displayed at the top of the page.
2360CEVENT := *PAGE-EVENT
2370CROWCOUNT := LINESINFO.ROWCOUNT
2380CSIZE := LINESINFO.SIZE
2390CTOPINDEX := LINESINFO.TOPINDEX
2400CDINDEX := LINESINFO.DSPINDEXFIRST
2410CINDEX := XCIEVENTDATA.XCIINDEX
2420END-SUBROUTINE
2430*
2440ON ERROR
2450  IF *LEVEL > 1
2460    COMPRESS '(NAT' *ERROR-NR ').' TO #MSG2 LEAVING NO
2470    COMPRESS #MSG1 #MSG2 TO #MSG1
2480    STACK TOP DATA #MSG1
2490    RESET *ERROR-NR
2500    ESCAPE ROUTINE
2510  END-IF
2520END-ERROR
2530END
