0010* >Natural Source Header 000000
0020* :Mode S
0030* :CP
0040* <Natural Source Header
0050DEFINE DATA LOCAL
00601 CDINDEX (I4)
00701 CEVENT (A) DYNAMIC
00801 CINDEX (I4)
00901 CROWCOUNT (I4)
01001 CSIZE (I4)
01101 CTOPINDEX (I4)
01201 INFOPAGENAME (A) DYNAMIC INIT <'html/ctrlrowtablearea2.html'>
01301 LINES (1:*)
0140  2 DRAGINFO (A) DYNAMIC
0150  2 DROPINFO (A) DYNAMIC
0160  2 FIRST (A) DYNAMIC
0170  2 ID (A) DYNAMIC
0180  2 INFOBUTTONVISIBLE (L)
0190  2 LAST (A) DYNAMIC
0200  2 LEVEL (I4)
0210  2 OPENED (I4)
0220  2 SELECTED (L)
0230  2 TEXT (A) DYNAMIC
02401 LINESINFO
0250  2 DSPINDEXFIRST (I4)
0260  2 ROWCOUNT (I4)
0270  2 SIZE (I4)
0280  2 SORTPROPS (1:*)
0290    3 ASCENDING (L)
0300    3 PROPNAME (A) DYNAMIC
0310  2 TOPINDEX (I4)
03201 XCIEVENTDATA
0330  2 XCIINDEX (I4)
0340*
0350* Number of rows initially displayed.
03601 CROWS (I4) CONST <15>
0370*
0380* Department record.
03901 DEPT VIEW OF EMPLOYEES
0400  2 DEPT
0410* Employees record.
04201 EMPL VIEW OF EMPLOYEES
0430  2 PERSONNEL-ID
0440  2 NAME
0450  2 REDEFINE NAME
0460    3 NAME1 (A1)
0470    3 NAME2 (A19)
0480  2 FIRST-NAME
0490  2 REDEFINE FIRST-NAME
0500    3 FIRST-NAME1 (A1)
0510    3 FIRST-NAME2 (A19)
0520*
0530* Server side cache of top nodes.
05401 CACHE (1:*)
0550* Node text.
0560  2 TEXT (A) DYNAMIC
0570* Open state of child nodes.
0580  2 COPEN (I4)
0590* Count of child nodes.
0600  2 CCOUNT (I4)
0610* Open state of additional info nodes.
0620  2 IOPEN (I4)
0630* Count of additional info nodes.
0640  2 ICOUNT (I4)
0650*
06601 I (I4)
06701 J (I4)
06801 K (I4)
06901 IND (I4)
07001 STARTINDEX (I4)
0710*
07201 #ROWCOUNT (I4)
07301 #LINECOUNT (I4)
07401 #TOPNODES (I4)
07501 #NODES (I4)
07601 #MSG1 (A72) INIT <'This example needs the EMPLOYEES file in the demo database'>
07701 #MSG2 (A24)
0780END-DEFINE
0790*
0800* Initialize the server side cache.
0810PERFORM INITCACHE
0820* Define the portion of lines to display initially.
0830LINESINFO.TOPINDEX := 0
0840LINESINFO.ROWCOUNT := CROWS
0850* Calulate the (initial) total number of records.
0860PERFORM GETSIZE
0870* Get the requested portion of lines.
0880PERFORM GETLINES
0890* Initialize the status info.
0900PERFORM SETSTATUSINFO
0910*
0920* Display the page.
0930PROCESS PAGE USING 'CTRRST-A'
0940*
0950* Handle the events.
0960DECIDE ON FIRST *PAGE-EVENT
0970  VALUE U'nat:page.end'
0980* Leave the program.
0990    IGNORE
1000*
1010* We need these three events to handle scrolling and toggling.
1020  VALUE U'lines.onTopindexChanged',
1030      U'lines.reactOnToggle',
1040      U'lines.reactOnToggleInfo'
1050* Synchronize the server side cache with the page display.
1060    PERFORM UPDATECACHE
1070* Get the requested portion of lines.
1080    PERFORM GETLINES
1090* Update the status info.
1100    PERFORM SETSTATUSINFO
1110* And return.
1120    PROCESS PAGE UPDATE FULL
1130*
1140  NONE VALUE
1150* Update the status info.
1160    PERFORM SETSTATUSINFO
1170* And return.
1180    PROCESS PAGE UPDATE FULL
1190END-DECIDE
1200*
1210* Initialize the server side cache.
1220DEFINE SUBROUTINE INITCACHE
1230* Determine the number of top nodes.
1240RESET #TOPNODES
1250HISTOGRAM DEPT FOR DEPT
1260  ADD 1 TO #TOPNODES
1270END-HISTOGRAM
1280EXPAND ARRAY CACHE TO (1:#TOPNODES)
1290* Add the top nodes.
1300RESET #TOPNODES
1310HISTOGRAM DEPT FOR DEPT
1320  ADD 1 TO #TOPNODES
1330  CACHE.TEXT (#TOPNODES) := DEPT.DEPT
1340  CACHE.COPEN (#TOPNODES) := 0
1350  CACHE.CCOUNT (#TOPNODES) := 0
1360  CACHE.IOPEN (#TOPNODES) := 0
1370  CACHE.ICOUNT (#TOPNODES) := 0
1380END-HISTOGRAM
1390END-SUBROUTINE
1400*
1410DEFINE SUBROUTINE UPDATECACHE
1420* Synchronize the cache with the page display.
1430* Keep track of nodes that got their their child nodes toggled.
1440IF *PAGE-EVENT = U'lines.reactOnToggle'
1450  I := XCIEVENTDATA.XCIINDEX
1460  IF LINES.LEVEL (I) EQ 1
1470    EXAMINE FULL CACHE.TEXT(*) FOR LINES.TEXT (I)
1480      GIVING INDEX IN J
1490    IF J NE 0
1500      CACHE.COPEN (J) := LINES.OPENED (I)
1510    END-IF
1520  END-IF
1530END-IF
1540*
1550* Keep track of nodes that got their additional info nodes toggled.
1560IF *PAGE-EVENT = U'lines.reactOnToggleInfo'
1570  I := XCIEVENTDATA.XCIINDEX
1580  IF LINES.LEVEL (I) EQ 1
1590    EXAMINE FULL CACHE.TEXT(*) FOR LINES.TEXT (I)
1600      GIVING INDEX IN J
1610    IF J NE 0
1620      IF CACHE.IOPEN (J) NE 0
1630        RESET CACHE.ICOUNT (J)
1640        CACHE.IOPEN (J) := 0
1650      ELSE
1660        CACHE.IOPEN (J) := 1
1670      END-IF
1680    END-IF
1690  END-IF
1700END-IF
1710END-SUBROUTINE
1720*
1730DEFINE SUBROUTINE GETLINES
1740* Get the requested portion of lines.
1750* Calculate the requested portion of nodes from top index and row count.
1760PERFORM GETINDEXES
1770* Get the child count for the top nodes that were not yet displayed.
1780IND := STARTINDEX
1790#ROWCOUNT := LINESINFO.ROWCOUNT
1800#LINECOUNT := #ROWCOUNT
1810FOR I := 1 TO #ROWCOUNT
1820* Add the child nodes.
1830  IF CACHE.COPEN (IND+I) NE 0 AND CACHE.CCOUNT (IND+I) EQ 0
1840    FIND NUMBER EMPL WITH DEPT = CACHE.TEXT (IND+I)
1850    CACHE.CCOUNT (IND+I) := *NUMBER
1860  END-IF
1870  ADD CACHE.CCOUNT (IND+I) TO #LINECOUNT
1880* Add the info nodes.
1890  IF CACHE.IOPEN (IND+I) NE 0 AND CACHE.ICOUNT (IND+I) EQ 0
1900    CACHE.ICOUNT (IND+I) := 6
1910  END-IF
1920  ADD CACHE.ICOUNT (IND+I) TO #LINECOUNT
1930END-FOR
1940* Copy the requested portion of lines into the page buffer.
1950REDUCE ARRAY LINES TO 0
1960EXPAND ARRAY LINES TO (1:#LINECOUNT)
1970RESET J
1980FOR I := 1 TO #ROWCOUNT
1990  ADD 1 TO J
2000  LINES.TEXT (J) := CACHE.TEXT (IND+I)
2010  LINES.OPENED (J) := CACHE.COPEN (IND+I)
2020  LINES.LEVEL (J) := 1
2030  LINES.INFOBUTTONVISIBLE (J) := TRUE
2040  IF CACHE.CCOUNT (IND+I) NE 0
2050    FIND EMPL WITH DEPT = CACHE.TEXT (IND+I)
2060      ADD 1 TO J
2070      RESET LINES.TEXT (J)
2080      LINES.OPENED (J) := 2
2090      LINES.LEVEL (J) := 2
2100      LINES.ID (J) := EMPL.PERSONNEL-ID
2110      EXAMINE EMPL.NAME2 TRANSLATE INTO LOWER
2120      EXAMINE EMPL.FIRST-NAME2 TRANSLATE INTO LOWER
2130      LINES.LAST (J) := EMPL.NAME
2140      LINES.FIRST (J) := EMPL.FIRST-NAME
2150    END-FIND
2160  END-IF
2170  IF CACHE.ICOUNT (IND+I) NE 0
2180    RESET K
2190    REPEAT WHILE K LT CACHE.ICOUNT (IND+I)
2200      ADD 1 TO K
2210      ADD 1 TO J
2220      RESET LINES.TEXT (J)
2230      LINES.OPENED (J) := 2
2240      LINES.LEVEL (J) := 2
2250      LINES.ID (J) := 4710 + K
2260      COMPRESS 'Meier' K TO LINES.LAST (J) LEAVING NO
2270      COMPRESS 'Hugo' K TO LINES.FIRST (J) LEAVING NO
2280    END-REPEAT
2290  END-IF
2300END-FOR
2310END-SUBROUTINE
2320*
2330DEFINE SUBROUTINE GETSIZE
2340* Calulate the (initial) total number of records.
2350LINESINFO.SIZE := *OCC(CACHE.TEXT)
2360END-SUBROUTINE
2370*
2380DEFINE SUBROUTINE GETINDEXES
2390* Calculate LINESINFO.DSPINDEXFIRST and STARTINDEX for GETLINES.
2400RESET STARTINDEX
2410RESET LINESINFO.DSPINDEXFIRST
2420RESET #NODES
2430FOR #TOPNODES := 1 TO *OCC(CACHE.TEXT)
2440  ADD 1 TO #NODES
2450  IF CACHE.COPEN (#TOPNODES) EQ 1
2460    ADD CACHE.CCOUNT (#TOPNODES) TO #NODES
2470    ADD CACHE.ICOUNT (#TOPNODES) TO #NODES
2480  END-IF
2490  IF #NODES GE LINESINFO.TOPINDEX + 1
2500    STARTINDEX := #TOPNODES - 1
2510    IF CACHE.COPEN (#TOPNODES) EQ 1
2520      SUBTRACT CACHE.CCOUNT (#TOPNODES) FROM #NODES
2530      SUBTRACT CACHE.ICOUNT (#TOPNODES) FROM #NODES
2540    END-IF
2550    LINESINFO.DSPINDEXFIRST := #NODES - 1
2560    ESCAPE ROUTINE
2570  END-IF
2580END-FOR
2590END-SUBROUTINE
2600*
2610DEFINE SUBROUTINE SETSTATUSINFO
2620* Update the status info displayed at the top of the page.
2630CEVENT := *PAGE-EVENT
2640CROWCOUNT := LINESINFO.ROWCOUNT
2650CSIZE := LINESINFO.SIZE
2660CTOPINDEX := LINESINFO.TOPINDEX
2670CDINDEX := LINESINFO.DSPINDEXFIRST
2680CINDEX := XCIEVENTDATA.XCIINDEX
2690END-SUBROUTINE
2700*
2710ON ERROR
2720  IF *LEVEL > 1
2730    COMPRESS '(NAT' *ERROR-NR ').' TO #MSG2 LEAVING NO
2740    COMPRESS #MSG1 #MSG2 TO #MSG1
2750    STACK TOP DATA #MSG1
2760    RESET *ERROR-NR
2770    ESCAPE ROUTINE
2780  END-IF
2790END-ERROR
2800END
